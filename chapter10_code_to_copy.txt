Project Step 10.1:

package lpk.austen

/**
 * Represents a line of text read in from a book.
 */
class Line(line : String) {

    fun words(): List<String> {
        return mutableListOf()
    }
}


Project Step 10.2:
package lpk.austen.test

import org.junit.Test
import org.junit.Assert
import lpk.austen.Line

class LineTest {
    @Test
    fun testEmpty() {
        val line = Line("")
        Assert.assertEquals(0, line.words().size)
    }
}


After Project Step 10.2:
@Test fun oneWord() {
    val line = Line("hello")
    val words = line.words()
    Assert.assertEquals(1, words.size)
    Assert.assertEquals("hello", words[0])
}


After Project Step 10.3:
@Test fun twoWords() {
    val line = Line("hello there")
    val words = line.words()
    Assert.assertEquals(2, words.size)
    Assert.assertEquals("hello", words[0])
    Assert.assertEquals("there", words[1])
}


After Project Step 10.4:
package lpk.austen

/**
 * Represents a line of text read in from a book.
 */
class Line(line : String) {
    val words = mutableListOf<String>()

    fun words(): List<String> {
        return words
    }
}


Project Step 10.5:
package lpk.austen

/**
 * Represents a line of text read in from a book.
 */
class Line(line : String) {
    val words = mutableListOf<String>()
    
    init {
        var currentWord = ""
        for (c in line) {
            if (c == ' ') {
                words.add(currentWord)
                currentWord = ""
            } else {
                currentWord = currentWord + c
            }
        }
        words.add(currentWord)
    }

    fun words(): List<String> {
        return words
    }
}



Just before Project Step 6:
if (currentWord != "") {
    words.add(currentWord)
}

Project Step 10.7:
@Test fun doubleSpace() {
    val line = Line("a  b")
    val words = line.words()
    Assert.assertEquals(2, words.size.toLong())
    Assert.assertEquals("a", words[0])
    Assert.assertEquals("b", words[1])
}


Project Step 10.8:
package lpk.austen

/**
 * Represents a line of text read in from a book.
 */
class Line(line: String) {
    val words = mutableListOf<String>()

    init {
        var currentWord = ""
        for (c in line) {
            if (c == ' ') {
                addWord(currentWord)
                currentWord = ""
            } else {
                currentWord = currentWord + c
            }
        }
        addWord(currentWord)
    }

    fun words(): List<String> {
        return words
    }

    fun addWord(str: String) {
        if (str != "") {
            words.add(str)
        }
    }
}


Project Step 10.9:
P90
@Test fun wordsAreLowerCase() {
    val line = Line("Hello THERE")
    val words = line.words()
    Assert.assertEquals(2, words.size.toLong())
    Assert.assertEquals("hello", words[0])
    Assert.assertEquals("there", words[1])
}



Project Step 10.11:
package lpk.austen

/**
 * Collects word usage data.
 */
class Histogram {

    fun record(word: String) {}

    fun allWords(): Set<String> {
        return mutableSetOf()
    }

    fun numberOfTimesGiven(word: String): Int {
        return 0
    }
}


Project Step 10.12:
package lpk.austen.test

import org.junit.Assert
import org.junit.Test
import lpk.austen.Histogram

public class HistogramTest {
    @Test
    fun emptyToStartWith() {
        val histogram = Histogram()
        Assert.assertEquals(0, histogram.allWords().size)
    }
}


Project Step 10.13:
@Test
fun unknownWord() {
    val histogram = Histogram()
    val given = histogram.numberOfTimesGiven("xylophone")
    Assert.assertEquals(0, given)
}



Project Step 10.14, beginning:
@Test
fun recordOneWord() {
    val histogram = Histogram()
    histogram.record("piano")
    val words = histogram.allWords()
}


Project Step 10.14, end:
@Test
fun recordOneWord() {
    val histogram = Histogram()
    histogram.record("piano")
    val words = histogram.allWords()
    Assert.assertEquals(1, words.size)
    Assert.assertTrue(words.contains("piano"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("piano"))
}


Project Step 10.15:
@Test
fun recordOneWordTwice() {
    val histogram = Histogram()
    histogram.record("piano")
    histogram.record("piano")
    val words = histogram.allWords()
}


Project Step 10.16:
@Test
fun recordTwoWords() {
    val histogram = Histogram()
    histogram.record("piano")
    histogram.record("violin")
    val words = histogram.allWords()
    Assert.assertEquals(2, words.size.toLong())
    Assert.assertTrue(words.contains("piano"))
    Assert.assertTrue(words.contains("violin"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("piano"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("violin"))
}


Project Step 10.17:
package lpk.austen

/**
 * Collects word usage data.
 */
class Histogram {

    val counter = mutableMapOf<String, Int>()

    fun record(word: String) {
    }

    fun allWords(): Set<String> {
        return counter.keys
    }

    fun numberOfTimesGiven(word: String): Int {
        return counter[word] ?: 0
    }
}

Project Step 10.18:
package lpk.austen

/**
 * Collects word usage data.
 */
class Histogram {

    val counter = mutableMapOf<String, Int>()

    fun record(word: String) {
        val currentCount = counter[word] ?: 0
        val newCount = currentCount + 1
        counter.put(word, newCount)
    }

    fun allWords(): Set<String> {
        return counter.keys
    }

    fun numberOfTimesGiven(word: String): Int {
        return counter[word] ?: 0
    }
}



Project Step 10.20:
P97-98
package lpk.austen.test

import org.junit.Assert
import org.junit.Test
import lpk.austen.Book
import java.nio.file.Paths

class BookTest {
    @Test fun shortStory() {
        val book = Book(Paths.get("src/test/resources/books/ShortStory.txt"))
        val allWords = book.histogram.allWords()
    }
}


After Project Step 10.21:
@Test fun shortStory() {
    val book = Book(Paths.get("src/test/resources/books/ShortStory.txt"))
    val allWords = book.histogram.allWords()

    Assert.assertEquals(4, allWords.size)

    Assert.assertTrue(allWords.contains("the"))
    Assert.assertTrue(allWords.contains("beginning"))
    Assert.assertTrue(allWords.contains("middle"))
    Assert.assertTrue(allWords.contains("end"))

    Assert.assertEquals(3, book.histogram.numberOfTimesGiven("the"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("beginning"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("middle"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("end"));
}


Project Step 10.22:
init {
    val lines = Files.readAllLines(bookFile)
    for (str in lines) {
        val line = Line(str)
        for (word in line.words()) {
            histogram.record(word)
        }
    }
}


Project Step 10.23:
@Test fun horrorStory() {
    val book = Book(Paths.get("src/test/resources/books/HorrorStory.txt"))
    val allWords = book.histogram.allWords()

    Assert.assertEquals(7, allWords.size)

    Assert.assertTrue(allWords.contains("it"))
    Assert.assertTrue(allWords.contains("was"))
    Assert.assertTrue(allWords.contains("a"))
    Assert.assertTrue(allWords.contains("and"))
    Assert.assertTrue(allWords.contains("stormy"))
    Assert.assertTrue(allWords.contains("night"))
    Assert.assertTrue(allWords.contains("dark"))

    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("it"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("was"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("a"))
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("dark"));
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("and"));
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("stormy"));
    Assert.assertEquals(1, book.histogram.numberOfTimesGiven("night"));
}


Project Step 10.24:
@Test 
fun littleBookOfCalmTest() {
    val book = Book(Paths.get("src/test/resources/books/TheLittleBookOfCalm.txt"))
    //This book has two lines with several repeated words. 
    //There is also a blank line. 
    //The two non-blank lines end in full stops. 
    val histogram = book.histogram
    Assert.assertEquals(2, histogram.numberOfTimesGiven("this"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("is"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("a"))
    Assert.assertEquals(3, histogram.numberOfTimesGiven("very"))
    Assert.assertEquals(2, histogram.numberOfTimesGiven("short"))
    Assert.assertEquals(2, histogram.numberOfTimesGiven("book"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("we"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("hope"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("that"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("you"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("find"))
    Assert.assertEquals(1, histogram.numberOfTimesGiven("calming"))
}


Project Step 10.25:
@Test
fun ignorePunctuation() {
    val line = Line("Hello. Goodbye! Yes? No, no.")
    val words = line.words()
    Assert.assertEquals(5, words.size)
    Assert.assertEquals("hello", words[0])
    Assert.assertEquals("goodbye", words[1])
    Assert.assertEquals("yes", words[2])
    Assert.assertEquals("no", words[3])
    Assert.assertEquals("no", words[4])
}

@Test fun morePunctuation() {
    val line = Line("Hello; _Goodbye_! X: 5")
    val words = line.words()
    Assert.assertEquals(4, words.size)
    Assert.assertEquals("hello", words[0])
    Assert.assertEquals("goodbye", words[1])
    Assert.assertEquals("x", words[2])
    Assert.assertEquals("5", words[3])
}


Project Step 10.24:
@Test
fun doubleQuotes() {
    val line = Line("\"It's not.\"")
    val words = line.words()
    Assert.assertEquals(2, words.size)
    Assert.assertEquals("it's", words[0])
    Assert.assertEquals("not", words[1])
}


Project Step 10.27:
package lpk.austen

/**
 * Represents a line of text read in from a book.
 */
class Line(line: String) {
    val words = mutableListOf<String>()

    init {
        var currentWord = ""
        for (c in line) {
            if (isWordTerminator(c)) {
                addWord(currentWord)
                currentWord = ""
            } else {
                currentWord = currentWord + c
            }
        }
        addWord(currentWord)
    }

    fun words(): List<String> {
        return words
    }

    fun addWord(str: String) {
        if (str != "") {
            words.add(str.toLowerCase())
        }
    }

    fun isWordTerminator(c: Char): Boolean {
        if (c == ' ') return true
        if (c == '.') return true
        if (c == ',') return true
        if (c == '!') return true
        if (c == '?') return true
        if (c == '\"') return true
        if (c == '_') return true
        if (c == ';') return true
        if (c == ':') return true
        return false
    }
}


Project Step 10.28:
@Test
fun prideAndPrejudice() {
    val book = Book(Paths.get("src/test/resources/books/Page1.txt"))
    //32 lines from the start of Pride and Prejudice
    val histogram = book.histogram

    //Check some words that we have counted using a text editor.
    Assert.assertEquals(1, histogram.numberOfTimesGiven("pride"))
    Assert.assertEquals(5, histogram.numberOfTimesGiven("it"))
    Assert.assertEquals(3, histogram.numberOfTimesGiven("and"))
    Assert.assertEquals(3, histogram.numberOfTimesGiven("bennet"))

    //Check that some words followed by punctuation are counted correctly.
    Assert.assertEquals(3, histogram.numberOfTimesGiven("you"))
    Assert.assertEquals(2, histogram.numberOfTimesGiven("she"))
}


Project Step 10.29:
fun main() {
    val book = Book(Paths.get("src/main/resources/books/PrideAndPrejudice.txt"))
    val histogram = book.histogram
    val allWords = histogram.allWords()
    for (word in allWords) {
        val count = histogram.numberOfTimesGiven(word)
        println("$word $count")
    }
}


Project Step 10.30:
@Test
fun brackets() {
    val line = Line("(left, right)")
    val words = line.words()
    Assert.assertEquals(2, words.size)
    Assert.assertEquals("left", words[0])
    Assert.assertEquals("right", words[1])
}


Project Step 10.31:
fun isWordTerminator(c: Char): Boolean {
    if (c == ' ') return true
    if (c == '.') return true
    if (c == ',') return true
    if (c == '!') return true
    if (c == '?') return true
    if (c == '\"') return true
    if (c == '_') return true
    if (c == ';') return true
    if (c == ':') return true
    if (c == '(') return true
    if (c == ')') return true
    return false
}


Project Step 10.32:
@Test
fun singleQuoteAfterComma() {
    val line = Line("week,' you")
    val words = line.words()
    Assert.assertEquals(2, words.size)
    Assert.assertEquals("week", words[0])
    Assert.assertEquals("you", words[1])
}


Project Step 10.33:
fun isWord(str: String) : Boolean {
    if (str == "") return false
    return true
}


Project Step 10.34:
fun isWord(str: String) : Boolean {
    if (str == "") return false
    if (str == "'") return false
    return true
}


Project Step 10.36:
@Test
fun totalNumberOfWords() {
    val histogram = Histogram()
    Assert.assertEquals(0, histogram.totalWords())

    histogram.record("piano")
    Assert.assertEquals(1, histogram.totalWords())

    histogram.record("piano")
    Assert.assertEquals(2, histogram.totalWords())

    histogram.record("cello")
    Assert.assertEquals(3, histogram.totalWords())

    histogram.record("guitar")
    Assert.assertEquals(4, histogram.totalWords())

    histogram.record("guitar")
    Assert.assertEquals(5, histogram.totalWords())
}


Project Step 10.37:
fun totalWords() : Int {
    var result = 0
    for (key in counter.keys) {
        val count = counter[key] ?: 0
        result = result + count
    }
    return result
}

Project Step 10.38:
fun main() {
    val book = Book(Paths.get("src/main/resources/books/PrideAndPrejudice.txt"))
    val totalWords = book.histogram.totalWords()
    println("Total word count: $totalWords")
}


Project Step 10.40:
import java.nio.file.Paths
import java.nio.file.Files

@Test
fun toCSVTest() {
    val histogram = Histogram()
    histogram.record("piano")
    histogram.record("piano")
    histogram.record("violin")
    val csvFile = Paths.get("HistogramTest.csv")
    histogram.toCSV(csvFile)

    val lines = Files.readAllLines(csvFile)
    Assert.assertEquals(2, lines.size)
    Assert.assertTrue(lines.contains("piano,2"))
    Assert.assertTrue(lines.contains("violin,1"))
}


Project Step 10.41:
fun toCSV(file : Path) {
    val csvLines = mutableListOf<String>()
    for (word in allWords()) {
        val timesGiven = numberOfTimesGiven(word)
        val line = "$word,$timesGiven"
        csvLines.add(line)
    }
    Files.write(file, csvLines)
}

Project Step 10.4:
fun main() {
    val book = Book(Paths.get("src/main/resources/books/PrideAndPrejudice.txt"))
    val totalWords = book.histogram.totalWords()
    println("Total word count: $totalWords")
    val file = Paths.get("PandPWords.csv")
    book.histogram.toCSV(file)
}
